/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: krpc.proto */

#ifndef PROTOBUF_C_krpc_2eproto__INCLUDED
#define PROTOBUF_C_krpc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Krpc__Schema__ConnectionRequest Krpc__Schema__ConnectionRequest;
typedef struct _Krpc__Schema__ConnectionResponse Krpc__Schema__ConnectionResponse;
typedef struct _Krpc__Schema__Request Krpc__Schema__Request;
typedef struct _Krpc__Schema__ProcedureCall Krpc__Schema__ProcedureCall;
typedef struct _Krpc__Schema__Argument Krpc__Schema__Argument;
typedef struct _Krpc__Schema__Response Krpc__Schema__Response;
typedef struct _Krpc__Schema__ProcedureResult Krpc__Schema__ProcedureResult;
typedef struct _Krpc__Schema__Error Krpc__Schema__Error;
typedef struct _Krpc__Schema__StreamUpdate Krpc__Schema__StreamUpdate;
typedef struct _Krpc__Schema__StreamResult Krpc__Schema__StreamResult;
typedef struct _Krpc__Schema__Services Krpc__Schema__Services;
typedef struct _Krpc__Schema__Service Krpc__Schema__Service;
typedef struct _Krpc__Schema__Procedure Krpc__Schema__Procedure;
typedef struct _Krpc__Schema__Parameter Krpc__Schema__Parameter;
typedef struct _Krpc__Schema__Class Krpc__Schema__Class;
typedef struct _Krpc__Schema__Enumeration Krpc__Schema__Enumeration;
typedef struct _Krpc__Schema__EnumerationValue Krpc__Schema__EnumerationValue;
typedef struct _Krpc__Schema__Exception Krpc__Schema__Exception;
typedef struct _Krpc__Schema__Type Krpc__Schema__Type;
typedef struct _Krpc__Schema__Tuple Krpc__Schema__Tuple;
typedef struct _Krpc__Schema__List Krpc__Schema__List;
typedef struct _Krpc__Schema__Set Krpc__Schema__Set;
typedef struct _Krpc__Schema__Dictionary Krpc__Schema__Dictionary;
typedef struct _Krpc__Schema__DictionaryEntry Krpc__Schema__DictionaryEntry;
typedef struct _Krpc__Schema__Stream Krpc__Schema__Stream;
typedef struct _Krpc__Schema__Event Krpc__Schema__Event;
typedef struct _Krpc__Schema__Status Krpc__Schema__Status;
typedef struct _Krpc__Schema__MultiplexedRequest Krpc__Schema__MultiplexedRequest;
typedef struct _Krpc__Schema__MultiplexedResponse Krpc__Schema__MultiplexedResponse;


/* --- enums --- */

typedef enum _Krpc__Schema__ConnectionRequest__Type {
  KRPC__SCHEMA__CONNECTION_REQUEST__TYPE__RPC = 0,
  KRPC__SCHEMA__CONNECTION_REQUEST__TYPE__STREAM = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KRPC__SCHEMA__CONNECTION_REQUEST__TYPE)
} Krpc__Schema__ConnectionRequest__Type;
typedef enum _Krpc__Schema__ConnectionResponse__Status {
  KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS__OK = 0,
  KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS__MALFORMED_MESSAGE = 1,
  KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS__TIMEOUT = 2,
  KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS__WRONG_TYPE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS)
} Krpc__Schema__ConnectionResponse__Status;
typedef enum _Krpc__Schema__Procedure__GameScene {
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__SPACE_CENTER = 0,
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__FLIGHT = 1,
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__TRACKING_STATION = 2,
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__EDITOR_VAB = 3,
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__EDITOR_SPH = 4,
  KRPC__SCHEMA__PROCEDURE__GAME_SCENE__MISSION_BUILDER = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KRPC__SCHEMA__PROCEDURE__GAME_SCENE)
} Krpc__Schema__Procedure__GameScene;
typedef enum _Krpc__Schema__Type__TypeCode {
  KRPC__SCHEMA__TYPE__TYPE_CODE__NONE = 0,
  /*
   * Values
   */
  KRPC__SCHEMA__TYPE__TYPE_CODE__DOUBLE = 1,
  KRPC__SCHEMA__TYPE__TYPE_CODE__FLOAT = 2,
  KRPC__SCHEMA__TYPE__TYPE_CODE__SINT32 = 3,
  KRPC__SCHEMA__TYPE__TYPE_CODE__SINT64 = 4,
  KRPC__SCHEMA__TYPE__TYPE_CODE__UINT32 = 5,
  KRPC__SCHEMA__TYPE__TYPE_CODE__UINT64 = 6,
  KRPC__SCHEMA__TYPE__TYPE_CODE__BOOL = 7,
  KRPC__SCHEMA__TYPE__TYPE_CODE__STRING = 8,
  KRPC__SCHEMA__TYPE__TYPE_CODE__BYTES = 9,
  /*
   * Objects
   */
  KRPC__SCHEMA__TYPE__TYPE_CODE__CLASS = 100,
  KRPC__SCHEMA__TYPE__TYPE_CODE__ENUMERATION = 101,
  /*
   * Messages
   */
  KRPC__SCHEMA__TYPE__TYPE_CODE__EVENT = 200,
  KRPC__SCHEMA__TYPE__TYPE_CODE__PROCEDURE_CALL = 201,
  KRPC__SCHEMA__TYPE__TYPE_CODE__STREAM = 202,
  KRPC__SCHEMA__TYPE__TYPE_CODE__STATUS = 203,
  KRPC__SCHEMA__TYPE__TYPE_CODE__SERVICES = 204,
  /*
   * Collections
   */
  KRPC__SCHEMA__TYPE__TYPE_CODE__TUPLE = 300,
  KRPC__SCHEMA__TYPE__TYPE_CODE__LIST = 301,
  KRPC__SCHEMA__TYPE__TYPE_CODE__SET = 302,
  KRPC__SCHEMA__TYPE__TYPE_CODE__DICTIONARY = 303
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KRPC__SCHEMA__TYPE__TYPE_CODE)
} Krpc__Schema__Type__TypeCode;

/* --- messages --- */

struct  _Krpc__Schema__ConnectionRequest
{
  ProtobufCMessage base;
  Krpc__Schema__ConnectionRequest__Type type;
  char *client_name;
  ProtobufCBinaryData client_identifier;
};
#define KRPC__SCHEMA__CONNECTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__connection_request__descriptor) \
    , KRPC__SCHEMA__CONNECTION_REQUEST__TYPE__RPC, (char *)protobuf_c_empty_string, {0,NULL} }


struct  _Krpc__Schema__ConnectionResponse
{
  ProtobufCMessage base;
  Krpc__Schema__ConnectionResponse__Status status;
  char *message;
  ProtobufCBinaryData client_identifier;
};
#define KRPC__SCHEMA__CONNECTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__connection_response__descriptor) \
    , KRPC__SCHEMA__CONNECTION_RESPONSE__STATUS__OK, (char *)protobuf_c_empty_string, {0,NULL} }


struct  _Krpc__Schema__Request
{
  ProtobufCMessage base;
  size_t n_calls;
  Krpc__Schema__ProcedureCall **calls;
};
#define KRPC__SCHEMA__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__request__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__ProcedureCall
{
  ProtobufCMessage base;
  char *service;
  char *procedure;
  uint32_t service_id;
  uint32_t procedure_id;
  size_t n_arguments;
  Krpc__Schema__Argument **arguments;
};
#define KRPC__SCHEMA__PROCEDURE_CALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__procedure_call__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0,NULL }


struct  _Krpc__Schema__Argument
{
  ProtobufCMessage base;
  uint32_t position;
  ProtobufCBinaryData value;
};
#define KRPC__SCHEMA__ARGUMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__argument__descriptor) \
    , 0, {0,NULL} }


struct  _Krpc__Schema__Response
{
  ProtobufCMessage base;
  Krpc__Schema__Error *error;
  size_t n_results;
  Krpc__Schema__ProcedureResult **results;
};
#define KRPC__SCHEMA__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__response__descriptor) \
    , NULL, 0,NULL }


struct  _Krpc__Schema__ProcedureResult
{
  ProtobufCMessage base;
  Krpc__Schema__Error *error;
  ProtobufCBinaryData value;
};
#define KRPC__SCHEMA__PROCEDURE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__procedure_result__descriptor) \
    , NULL, {0,NULL} }


struct  _Krpc__Schema__Error
{
  ProtobufCMessage base;
  char *service;
  char *name;
  char *description;
  char *stack_trace;
};
#define KRPC__SCHEMA__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__error__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__StreamUpdate
{
  ProtobufCMessage base;
  size_t n_results;
  Krpc__Schema__StreamResult **results;
};
#define KRPC__SCHEMA__STREAM_UPDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__stream_update__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__StreamResult
{
  ProtobufCMessage base;
  uint64_t id;
  Krpc__Schema__ProcedureResult *result;
};
#define KRPC__SCHEMA__STREAM_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__stream_result__descriptor) \
    , 0, NULL }


struct  _Krpc__Schema__Services
{
  ProtobufCMessage base;
  size_t n_services;
  Krpc__Schema__Service **services;
};
#define KRPC__SCHEMA__SERVICES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__services__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__Service
{
  ProtobufCMessage base;
  char *name;
  size_t n_procedures;
  Krpc__Schema__Procedure **procedures;
  size_t n_classes;
  Krpc__Schema__Class **classes;
  size_t n_enumerations;
  Krpc__Schema__Enumeration **enumerations;
  size_t n_exceptions;
  Krpc__Schema__Exception **exceptions;
  char *documentation;
};
#define KRPC__SCHEMA__SERVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__service__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__Procedure
{
  ProtobufCMessage base;
  char *name;
  size_t n_parameters;
  Krpc__Schema__Parameter **parameters;
  Krpc__Schema__Type *return_type;
  protobuf_c_boolean return_is_nullable;
  size_t n_game_scenes;
  Krpc__Schema__Procedure__GameScene *game_scenes;
  char *documentation;
};
#define KRPC__SCHEMA__PROCEDURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__procedure__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, NULL, 0, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__Parameter
{
  ProtobufCMessage base;
  char *name;
  Krpc__Schema__Type *type;
  ProtobufCBinaryData default_value;
  protobuf_c_boolean nullable;
};
#define KRPC__SCHEMA__PARAMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__parameter__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, {0,NULL}, 0 }


struct  _Krpc__Schema__Class
{
  ProtobufCMessage base;
  char *name;
  char *documentation;
};
#define KRPC__SCHEMA__CLASS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__class__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__Enumeration
{
  ProtobufCMessage base;
  char *name;
  size_t n_values;
  Krpc__Schema__EnumerationValue **values;
  char *documentation;
};
#define KRPC__SCHEMA__ENUMERATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__enumeration__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__EnumerationValue
{
  ProtobufCMessage base;
  char *name;
  int32_t value;
  char *documentation;
};
#define KRPC__SCHEMA__ENUMERATION_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__enumeration_value__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__Exception
{
  ProtobufCMessage base;
  char *name;
  char *documentation;
};
#define KRPC__SCHEMA__EXCEPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__exception__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Krpc__Schema__Type
{
  ProtobufCMessage base;
  Krpc__Schema__Type__TypeCode code;
  char *service;
  char *name;
  size_t n_types;
  Krpc__Schema__Type **types;
};
#define KRPC__SCHEMA__TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__type__descriptor) \
    , KRPC__SCHEMA__TYPE__TYPE_CODE__NONE, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


struct  _Krpc__Schema__Tuple
{
  ProtobufCMessage base;
  size_t n_items;
  ProtobufCBinaryData *items;
};
#define KRPC__SCHEMA__TUPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__tuple__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__List
{
  ProtobufCMessage base;
  size_t n_items;
  ProtobufCBinaryData *items;
};
#define KRPC__SCHEMA__LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__list__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__Set
{
  ProtobufCMessage base;
  size_t n_items;
  ProtobufCBinaryData *items;
};
#define KRPC__SCHEMA__SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__set__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__Dictionary
{
  ProtobufCMessage base;
  size_t n_entries;
  Krpc__Schema__DictionaryEntry **entries;
};
#define KRPC__SCHEMA__DICTIONARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__dictionary__descriptor) \
    , 0,NULL }


struct  _Krpc__Schema__DictionaryEntry
{
  ProtobufCMessage base;
  ProtobufCBinaryData key;
  ProtobufCBinaryData value;
};
#define KRPC__SCHEMA__DICTIONARY_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__dictionary_entry__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _Krpc__Schema__Stream
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KRPC__SCHEMA__STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__stream__descriptor) \
    , 0 }


struct  _Krpc__Schema__Event
{
  ProtobufCMessage base;
  Krpc__Schema__Stream *stream;
};
#define KRPC__SCHEMA__EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__event__descriptor) \
    , NULL }


struct  _Krpc__Schema__Status
{
  ProtobufCMessage base;
  char *version;
  uint64_t bytes_read;
  uint64_t bytes_written;
  float bytes_read_rate;
  float bytes_written_rate;
  uint64_t rpcs_executed;
  float rpc_rate;
  protobuf_c_boolean one_rpc_per_update;
  uint32_t max_time_per_update;
  protobuf_c_boolean adaptive_rate_control;
  protobuf_c_boolean blocking_recv;
  uint32_t recv_timeout;
  float time_per_rpc_update;
  float poll_time_per_rpc_update;
  float exec_time_per_rpc_update;
  uint32_t stream_rpcs;
  uint64_t stream_rpcs_executed;
  float stream_rpc_rate;
  float time_per_stream_update;
};
#define KRPC__SCHEMA__STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__status__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Krpc__Schema__MultiplexedRequest
{
  ProtobufCMessage base;
  Krpc__Schema__ConnectionRequest *connection_request;
  Krpc__Schema__Request *request;
};
#define KRPC__SCHEMA__MULTIPLEXED_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__multiplexed_request__descriptor) \
    , NULL, NULL }


struct  _Krpc__Schema__MultiplexedResponse
{
  ProtobufCMessage base;
  Krpc__Schema__Response *response;
  Krpc__Schema__StreamUpdate *stream_update;
};
#define KRPC__SCHEMA__MULTIPLEXED_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&krpc__schema__multiplexed_response__descriptor) \
    , NULL, NULL }


/* Krpc__Schema__ConnectionRequest methods */
void   krpc__schema__connection_request__init
                     (Krpc__Schema__ConnectionRequest         *message);
size_t krpc__schema__connection_request__get_packed_size
                     (const Krpc__Schema__ConnectionRequest   *message);
size_t krpc__schema__connection_request__pack
                     (const Krpc__Schema__ConnectionRequest   *message,
                      uint8_t             *out);
size_t krpc__schema__connection_request__pack_to_buffer
                     (const Krpc__Schema__ConnectionRequest   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__ConnectionRequest *
       krpc__schema__connection_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__connection_request__free_unpacked
                     (Krpc__Schema__ConnectionRequest *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__ConnectionResponse methods */
void   krpc__schema__connection_response__init
                     (Krpc__Schema__ConnectionResponse         *message);
size_t krpc__schema__connection_response__get_packed_size
                     (const Krpc__Schema__ConnectionResponse   *message);
size_t krpc__schema__connection_response__pack
                     (const Krpc__Schema__ConnectionResponse   *message,
                      uint8_t             *out);
size_t krpc__schema__connection_response__pack_to_buffer
                     (const Krpc__Schema__ConnectionResponse   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__ConnectionResponse *
       krpc__schema__connection_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__connection_response__free_unpacked
                     (Krpc__Schema__ConnectionResponse *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Request methods */
void   krpc__schema__request__init
                     (Krpc__Schema__Request         *message);
size_t krpc__schema__request__get_packed_size
                     (const Krpc__Schema__Request   *message);
size_t krpc__schema__request__pack
                     (const Krpc__Schema__Request   *message,
                      uint8_t             *out);
size_t krpc__schema__request__pack_to_buffer
                     (const Krpc__Schema__Request   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Request *
       krpc__schema__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__request__free_unpacked
                     (Krpc__Schema__Request *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__ProcedureCall methods */
void   krpc__schema__procedure_call__init
                     (Krpc__Schema__ProcedureCall         *message);
size_t krpc__schema__procedure_call__get_packed_size
                     (const Krpc__Schema__ProcedureCall   *message);
size_t krpc__schema__procedure_call__pack
                     (const Krpc__Schema__ProcedureCall   *message,
                      uint8_t             *out);
size_t krpc__schema__procedure_call__pack_to_buffer
                     (const Krpc__Schema__ProcedureCall   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__ProcedureCall *
       krpc__schema__procedure_call__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__procedure_call__free_unpacked
                     (Krpc__Schema__ProcedureCall *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Argument methods */
void   krpc__schema__argument__init
                     (Krpc__Schema__Argument         *message);
size_t krpc__schema__argument__get_packed_size
                     (const Krpc__Schema__Argument   *message);
size_t krpc__schema__argument__pack
                     (const Krpc__Schema__Argument   *message,
                      uint8_t             *out);
size_t krpc__schema__argument__pack_to_buffer
                     (const Krpc__Schema__Argument   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Argument *
       krpc__schema__argument__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__argument__free_unpacked
                     (Krpc__Schema__Argument *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Response methods */
void   krpc__schema__response__init
                     (Krpc__Schema__Response         *message);
size_t krpc__schema__response__get_packed_size
                     (const Krpc__Schema__Response   *message);
size_t krpc__schema__response__pack
                     (const Krpc__Schema__Response   *message,
                      uint8_t             *out);
size_t krpc__schema__response__pack_to_buffer
                     (const Krpc__Schema__Response   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Response *
       krpc__schema__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__response__free_unpacked
                     (Krpc__Schema__Response *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__ProcedureResult methods */
void   krpc__schema__procedure_result__init
                     (Krpc__Schema__ProcedureResult         *message);
size_t krpc__schema__procedure_result__get_packed_size
                     (const Krpc__Schema__ProcedureResult   *message);
size_t krpc__schema__procedure_result__pack
                     (const Krpc__Schema__ProcedureResult   *message,
                      uint8_t             *out);
size_t krpc__schema__procedure_result__pack_to_buffer
                     (const Krpc__Schema__ProcedureResult   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__ProcedureResult *
       krpc__schema__procedure_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__procedure_result__free_unpacked
                     (Krpc__Schema__ProcedureResult *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Error methods */
void   krpc__schema__error__init
                     (Krpc__Schema__Error         *message);
size_t krpc__schema__error__get_packed_size
                     (const Krpc__Schema__Error   *message);
size_t krpc__schema__error__pack
                     (const Krpc__Schema__Error   *message,
                      uint8_t             *out);
size_t krpc__schema__error__pack_to_buffer
                     (const Krpc__Schema__Error   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Error *
       krpc__schema__error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__error__free_unpacked
                     (Krpc__Schema__Error *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__StreamUpdate methods */
void   krpc__schema__stream_update__init
                     (Krpc__Schema__StreamUpdate         *message);
size_t krpc__schema__stream_update__get_packed_size
                     (const Krpc__Schema__StreamUpdate   *message);
size_t krpc__schema__stream_update__pack
                     (const Krpc__Schema__StreamUpdate   *message,
                      uint8_t             *out);
size_t krpc__schema__stream_update__pack_to_buffer
                     (const Krpc__Schema__StreamUpdate   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__StreamUpdate *
       krpc__schema__stream_update__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__stream_update__free_unpacked
                     (Krpc__Schema__StreamUpdate *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__StreamResult methods */
void   krpc__schema__stream_result__init
                     (Krpc__Schema__StreamResult         *message);
size_t krpc__schema__stream_result__get_packed_size
                     (const Krpc__Schema__StreamResult   *message);
size_t krpc__schema__stream_result__pack
                     (const Krpc__Schema__StreamResult   *message,
                      uint8_t             *out);
size_t krpc__schema__stream_result__pack_to_buffer
                     (const Krpc__Schema__StreamResult   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__StreamResult *
       krpc__schema__stream_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__stream_result__free_unpacked
                     (Krpc__Schema__StreamResult *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Services methods */
void   krpc__schema__services__init
                     (Krpc__Schema__Services         *message);
size_t krpc__schema__services__get_packed_size
                     (const Krpc__Schema__Services   *message);
size_t krpc__schema__services__pack
                     (const Krpc__Schema__Services   *message,
                      uint8_t             *out);
size_t krpc__schema__services__pack_to_buffer
                     (const Krpc__Schema__Services   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Services *
       krpc__schema__services__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__services__free_unpacked
                     (Krpc__Schema__Services *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Service methods */
void   krpc__schema__service__init
                     (Krpc__Schema__Service         *message);
size_t krpc__schema__service__get_packed_size
                     (const Krpc__Schema__Service   *message);
size_t krpc__schema__service__pack
                     (const Krpc__Schema__Service   *message,
                      uint8_t             *out);
size_t krpc__schema__service__pack_to_buffer
                     (const Krpc__Schema__Service   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Service *
       krpc__schema__service__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__service__free_unpacked
                     (Krpc__Schema__Service *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Procedure methods */
void   krpc__schema__procedure__init
                     (Krpc__Schema__Procedure         *message);
size_t krpc__schema__procedure__get_packed_size
                     (const Krpc__Schema__Procedure   *message);
size_t krpc__schema__procedure__pack
                     (const Krpc__Schema__Procedure   *message,
                      uint8_t             *out);
size_t krpc__schema__procedure__pack_to_buffer
                     (const Krpc__Schema__Procedure   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Procedure *
       krpc__schema__procedure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__procedure__free_unpacked
                     (Krpc__Schema__Procedure *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Parameter methods */
void   krpc__schema__parameter__init
                     (Krpc__Schema__Parameter         *message);
size_t krpc__schema__parameter__get_packed_size
                     (const Krpc__Schema__Parameter   *message);
size_t krpc__schema__parameter__pack
                     (const Krpc__Schema__Parameter   *message,
                      uint8_t             *out);
size_t krpc__schema__parameter__pack_to_buffer
                     (const Krpc__Schema__Parameter   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Parameter *
       krpc__schema__parameter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__parameter__free_unpacked
                     (Krpc__Schema__Parameter *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Class methods */
void   krpc__schema__class__init
                     (Krpc__Schema__Class         *message);
size_t krpc__schema__class__get_packed_size
                     (const Krpc__Schema__Class   *message);
size_t krpc__schema__class__pack
                     (const Krpc__Schema__Class   *message,
                      uint8_t             *out);
size_t krpc__schema__class__pack_to_buffer
                     (const Krpc__Schema__Class   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Class *
       krpc__schema__class__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__class__free_unpacked
                     (Krpc__Schema__Class *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Enumeration methods */
void   krpc__schema__enumeration__init
                     (Krpc__Schema__Enumeration         *message);
size_t krpc__schema__enumeration__get_packed_size
                     (const Krpc__Schema__Enumeration   *message);
size_t krpc__schema__enumeration__pack
                     (const Krpc__Schema__Enumeration   *message,
                      uint8_t             *out);
size_t krpc__schema__enumeration__pack_to_buffer
                     (const Krpc__Schema__Enumeration   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Enumeration *
       krpc__schema__enumeration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__enumeration__free_unpacked
                     (Krpc__Schema__Enumeration *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__EnumerationValue methods */
void   krpc__schema__enumeration_value__init
                     (Krpc__Schema__EnumerationValue         *message);
size_t krpc__schema__enumeration_value__get_packed_size
                     (const Krpc__Schema__EnumerationValue   *message);
size_t krpc__schema__enumeration_value__pack
                     (const Krpc__Schema__EnumerationValue   *message,
                      uint8_t             *out);
size_t krpc__schema__enumeration_value__pack_to_buffer
                     (const Krpc__Schema__EnumerationValue   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__EnumerationValue *
       krpc__schema__enumeration_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__enumeration_value__free_unpacked
                     (Krpc__Schema__EnumerationValue *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Exception methods */
void   krpc__schema__exception__init
                     (Krpc__Schema__Exception         *message);
size_t krpc__schema__exception__get_packed_size
                     (const Krpc__Schema__Exception   *message);
size_t krpc__schema__exception__pack
                     (const Krpc__Schema__Exception   *message,
                      uint8_t             *out);
size_t krpc__schema__exception__pack_to_buffer
                     (const Krpc__Schema__Exception   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Exception *
       krpc__schema__exception__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__exception__free_unpacked
                     (Krpc__Schema__Exception *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Type methods */
void   krpc__schema__type__init
                     (Krpc__Schema__Type         *message);
size_t krpc__schema__type__get_packed_size
                     (const Krpc__Schema__Type   *message);
size_t krpc__schema__type__pack
                     (const Krpc__Schema__Type   *message,
                      uint8_t             *out);
size_t krpc__schema__type__pack_to_buffer
                     (const Krpc__Schema__Type   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Type *
       krpc__schema__type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__type__free_unpacked
                     (Krpc__Schema__Type *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Tuple methods */
void   krpc__schema__tuple__init
                     (Krpc__Schema__Tuple         *message);
size_t krpc__schema__tuple__get_packed_size
                     (const Krpc__Schema__Tuple   *message);
size_t krpc__schema__tuple__pack
                     (const Krpc__Schema__Tuple   *message,
                      uint8_t             *out);
size_t krpc__schema__tuple__pack_to_buffer
                     (const Krpc__Schema__Tuple   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Tuple *
       krpc__schema__tuple__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__tuple__free_unpacked
                     (Krpc__Schema__Tuple *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__List methods */
void   krpc__schema__list__init
                     (Krpc__Schema__List         *message);
size_t krpc__schema__list__get_packed_size
                     (const Krpc__Schema__List   *message);
size_t krpc__schema__list__pack
                     (const Krpc__Schema__List   *message,
                      uint8_t             *out);
size_t krpc__schema__list__pack_to_buffer
                     (const Krpc__Schema__List   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__List *
       krpc__schema__list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__list__free_unpacked
                     (Krpc__Schema__List *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Set methods */
void   krpc__schema__set__init
                     (Krpc__Schema__Set         *message);
size_t krpc__schema__set__get_packed_size
                     (const Krpc__Schema__Set   *message);
size_t krpc__schema__set__pack
                     (const Krpc__Schema__Set   *message,
                      uint8_t             *out);
size_t krpc__schema__set__pack_to_buffer
                     (const Krpc__Schema__Set   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Set *
       krpc__schema__set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__set__free_unpacked
                     (Krpc__Schema__Set *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Dictionary methods */
void   krpc__schema__dictionary__init
                     (Krpc__Schema__Dictionary         *message);
size_t krpc__schema__dictionary__get_packed_size
                     (const Krpc__Schema__Dictionary   *message);
size_t krpc__schema__dictionary__pack
                     (const Krpc__Schema__Dictionary   *message,
                      uint8_t             *out);
size_t krpc__schema__dictionary__pack_to_buffer
                     (const Krpc__Schema__Dictionary   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Dictionary *
       krpc__schema__dictionary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__dictionary__free_unpacked
                     (Krpc__Schema__Dictionary *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__DictionaryEntry methods */
void   krpc__schema__dictionary_entry__init
                     (Krpc__Schema__DictionaryEntry         *message);
size_t krpc__schema__dictionary_entry__get_packed_size
                     (const Krpc__Schema__DictionaryEntry   *message);
size_t krpc__schema__dictionary_entry__pack
                     (const Krpc__Schema__DictionaryEntry   *message,
                      uint8_t             *out);
size_t krpc__schema__dictionary_entry__pack_to_buffer
                     (const Krpc__Schema__DictionaryEntry   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__DictionaryEntry *
       krpc__schema__dictionary_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__dictionary_entry__free_unpacked
                     (Krpc__Schema__DictionaryEntry *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Stream methods */
void   krpc__schema__stream__init
                     (Krpc__Schema__Stream         *message);
size_t krpc__schema__stream__get_packed_size
                     (const Krpc__Schema__Stream   *message);
size_t krpc__schema__stream__pack
                     (const Krpc__Schema__Stream   *message,
                      uint8_t             *out);
size_t krpc__schema__stream__pack_to_buffer
                     (const Krpc__Schema__Stream   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Stream *
       krpc__schema__stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__stream__free_unpacked
                     (Krpc__Schema__Stream *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Event methods */
void   krpc__schema__event__init
                     (Krpc__Schema__Event         *message);
size_t krpc__schema__event__get_packed_size
                     (const Krpc__Schema__Event   *message);
size_t krpc__schema__event__pack
                     (const Krpc__Schema__Event   *message,
                      uint8_t             *out);
size_t krpc__schema__event__pack_to_buffer
                     (const Krpc__Schema__Event   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Event *
       krpc__schema__event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__event__free_unpacked
                     (Krpc__Schema__Event *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__Status methods */
void   krpc__schema__status__init
                     (Krpc__Schema__Status         *message);
size_t krpc__schema__status__get_packed_size
                     (const Krpc__Schema__Status   *message);
size_t krpc__schema__status__pack
                     (const Krpc__Schema__Status   *message,
                      uint8_t             *out);
size_t krpc__schema__status__pack_to_buffer
                     (const Krpc__Schema__Status   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__Status *
       krpc__schema__status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__status__free_unpacked
                     (Krpc__Schema__Status *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__MultiplexedRequest methods */
void   krpc__schema__multiplexed_request__init
                     (Krpc__Schema__MultiplexedRequest         *message);
size_t krpc__schema__multiplexed_request__get_packed_size
                     (const Krpc__Schema__MultiplexedRequest   *message);
size_t krpc__schema__multiplexed_request__pack
                     (const Krpc__Schema__MultiplexedRequest   *message,
                      uint8_t             *out);
size_t krpc__schema__multiplexed_request__pack_to_buffer
                     (const Krpc__Schema__MultiplexedRequest   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__MultiplexedRequest *
       krpc__schema__multiplexed_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__multiplexed_request__free_unpacked
                     (Krpc__Schema__MultiplexedRequest *message,
                      ProtobufCAllocator *allocator);
/* Krpc__Schema__MultiplexedResponse methods */
void   krpc__schema__multiplexed_response__init
                     (Krpc__Schema__MultiplexedResponse         *message);
size_t krpc__schema__multiplexed_response__get_packed_size
                     (const Krpc__Schema__MultiplexedResponse   *message);
size_t krpc__schema__multiplexed_response__pack
                     (const Krpc__Schema__MultiplexedResponse   *message,
                      uint8_t             *out);
size_t krpc__schema__multiplexed_response__pack_to_buffer
                     (const Krpc__Schema__MultiplexedResponse   *message,
                      ProtobufCBuffer     *buffer);
Krpc__Schema__MultiplexedResponse *
       krpc__schema__multiplexed_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   krpc__schema__multiplexed_response__free_unpacked
                     (Krpc__Schema__MultiplexedResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Krpc__Schema__ConnectionRequest_Closure)
                 (const Krpc__Schema__ConnectionRequest *message,
                  void *closure_data);
typedef void (*Krpc__Schema__ConnectionResponse_Closure)
                 (const Krpc__Schema__ConnectionResponse *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Request_Closure)
                 (const Krpc__Schema__Request *message,
                  void *closure_data);
typedef void (*Krpc__Schema__ProcedureCall_Closure)
                 (const Krpc__Schema__ProcedureCall *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Argument_Closure)
                 (const Krpc__Schema__Argument *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Response_Closure)
                 (const Krpc__Schema__Response *message,
                  void *closure_data);
typedef void (*Krpc__Schema__ProcedureResult_Closure)
                 (const Krpc__Schema__ProcedureResult *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Error_Closure)
                 (const Krpc__Schema__Error *message,
                  void *closure_data);
typedef void (*Krpc__Schema__StreamUpdate_Closure)
                 (const Krpc__Schema__StreamUpdate *message,
                  void *closure_data);
typedef void (*Krpc__Schema__StreamResult_Closure)
                 (const Krpc__Schema__StreamResult *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Services_Closure)
                 (const Krpc__Schema__Services *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Service_Closure)
                 (const Krpc__Schema__Service *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Procedure_Closure)
                 (const Krpc__Schema__Procedure *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Parameter_Closure)
                 (const Krpc__Schema__Parameter *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Class_Closure)
                 (const Krpc__Schema__Class *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Enumeration_Closure)
                 (const Krpc__Schema__Enumeration *message,
                  void *closure_data);
typedef void (*Krpc__Schema__EnumerationValue_Closure)
                 (const Krpc__Schema__EnumerationValue *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Exception_Closure)
                 (const Krpc__Schema__Exception *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Type_Closure)
                 (const Krpc__Schema__Type *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Tuple_Closure)
                 (const Krpc__Schema__Tuple *message,
                  void *closure_data);
typedef void (*Krpc__Schema__List_Closure)
                 (const Krpc__Schema__List *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Set_Closure)
                 (const Krpc__Schema__Set *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Dictionary_Closure)
                 (const Krpc__Schema__Dictionary *message,
                  void *closure_data);
typedef void (*Krpc__Schema__DictionaryEntry_Closure)
                 (const Krpc__Schema__DictionaryEntry *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Stream_Closure)
                 (const Krpc__Schema__Stream *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Event_Closure)
                 (const Krpc__Schema__Event *message,
                  void *closure_data);
typedef void (*Krpc__Schema__Status_Closure)
                 (const Krpc__Schema__Status *message,
                  void *closure_data);
typedef void (*Krpc__Schema__MultiplexedRequest_Closure)
                 (const Krpc__Schema__MultiplexedRequest *message,
                  void *closure_data);
typedef void (*Krpc__Schema__MultiplexedResponse_Closure)
                 (const Krpc__Schema__MultiplexedResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor krpc__schema__connection_request__descriptor;
extern const ProtobufCEnumDescriptor    krpc__schema__connection_request__type__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__connection_response__descriptor;
extern const ProtobufCEnumDescriptor    krpc__schema__connection_response__status__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__request__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__procedure_call__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__argument__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__response__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__procedure_result__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__error__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__stream_update__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__stream_result__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__services__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__service__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__procedure__descriptor;
extern const ProtobufCEnumDescriptor    krpc__schema__procedure__game_scene__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__parameter__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__class__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__enumeration__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__enumeration_value__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__exception__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__type__descriptor;
extern const ProtobufCEnumDescriptor    krpc__schema__type__type_code__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__tuple__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__list__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__set__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__dictionary__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__dictionary_entry__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__stream__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__event__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__status__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__multiplexed_request__descriptor;
extern const ProtobufCMessageDescriptor krpc__schema__multiplexed_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_krpc_2eproto__INCLUDED */
