/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: varint.proto */

#ifndef PROTOBUF_C_varint_2eproto__INCLUDED
#define PROTOBUF_C_varint_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Varint Varint;
typedef struct _Uint32 Uint32;
typedef struct _Float Float;
typedef struct _Double Double;


/* --- enums --- */


/* --- messages --- */

struct  _Varint
{
  ProtobufCMessage base;
  uint32_t value;
};
#define VARINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&varint__descriptor) \
    , 0 }


struct  _Uint32
{
  ProtobufCMessage base;
  uint32_t value;
};
#define UINT32__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&uint32__descriptor) \
    , 0 }


struct  _Float
{
  ProtobufCMessage base;
  float value;
};
#define FLOAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&float__descriptor) \
    , 0 }


struct  _Double
{
  ProtobufCMessage base;
  double value;
};
#define DOUBLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&double__descriptor) \
    , 0 }


/* Varint methods */
void   varint__init
                     (Varint         *message);
size_t varint__get_packed_size
                     (const Varint   *message);
size_t varint__pack
                     (const Varint   *message,
                      uint8_t             *out);
size_t varint__pack_to_buffer
                     (const Varint   *message,
                      ProtobufCBuffer     *buffer);
Varint *
       varint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   varint__free_unpacked
                     (Varint *message,
                      ProtobufCAllocator *allocator);
/* Uint32 methods */
void   uint32__init
                     (Uint32         *message);
size_t uint32__get_packed_size
                     (const Uint32   *message);
size_t uint32__pack
                     (const Uint32   *message,
                      uint8_t             *out);
size_t uint32__pack_to_buffer
                     (const Uint32   *message,
                      ProtobufCBuffer     *buffer);
Uint32 *
       uint32__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   uint32__free_unpacked
                     (Uint32 *message,
                      ProtobufCAllocator *allocator);
/* Float methods */
void   float__init
                     (Float         *message);
size_t float__get_packed_size
                     (const Float   *message);
size_t float__pack
                     (const Float   *message,
                      uint8_t             *out);
size_t float__pack_to_buffer
                     (const Float   *message,
                      ProtobufCBuffer     *buffer);
Float *
       float__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   float__free_unpacked
                     (Float *message,
                      ProtobufCAllocator *allocator);
/* Double methods */
void   double__init
                     (Double         *message);
size_t double__get_packed_size
                     (const Double   *message);
size_t double__pack
                     (const Double   *message,
                      uint8_t             *out);
size_t double__pack_to_buffer
                     (const Double   *message,
                      ProtobufCBuffer     *buffer);
Double *
       double__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   double__free_unpacked
                     (Double *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Varint_Closure)
                 (const Varint *message,
                  void *closure_data);
typedef void (*Uint32_Closure)
                 (const Uint32 *message,
                  void *closure_data);
typedef void (*Float_Closure)
                 (const Float *message,
                  void *closure_data);
typedef void (*Double_Closure)
                 (const Double *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor varint__descriptor;
extern const ProtobufCMessageDescriptor uint32__descriptor;
extern const ProtobufCMessageDescriptor float__descriptor;
extern const ProtobufCMessageDescriptor double__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_varint_2eproto__INCLUDED */
